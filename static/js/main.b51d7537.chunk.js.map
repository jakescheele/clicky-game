{"version":3,"sources":["components/header.js","components/jumbotron.js","components/card.js","App.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","score","Jumbotron","Card","src","process","id","onClick","e","clickHandler","App","state","cards","experiments","shuffle","array","sort","Math","random","_this","find","card","clicked","gameOver","newArray","map","setState","gameResults","console","log","alert","_this2","this","Fragment","header","jumbotron","components_card","key","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"04BAaeA,MAXf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,uBACAJ,EAAAC,EAAAC,cAAA,sBAAcH,EAAMM,UCMrBC,MAXf,WACI,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,UACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,qHCCDI,MANf,SAAcR,GACV,OACQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWK,IAAKC,iCAAyBV,EAAMS,IAAKE,GAAIX,EAAMW,GAAIC,QAAS,SAACC,GAAD,OAAKb,EAAMc,aAAad,EAAMW,GAAIE,cCsFzHE,oNAjFbC,MAAQ,CACNV,MAAO,EACPW,MAAOC,KAKTC,QAAU,SAACC,GAET,OADAA,EAAMC,KAAK,kBAAMC,KAAKC,SAAW,KAC1BH,KAGTN,aAAe,SAACH,GAId,GADkBa,EAAKR,MAAMC,MAAMQ,KAAK,SAAAC,GAAI,OAAKA,EAAKf,KAAOA,IAC7CgB,QACdH,EAAKI,eAEF,CACH,IAAIC,EAAWL,EAAKR,MAAMC,MAAMa,IAAI,SAAAJ,GAIlC,OAHIA,EAAKf,KAAOA,IACde,EAAKC,SAAU,GAEVD,IAETF,EAAKO,SAAS,CACZzB,MAAOkB,EAAKR,MAAMV,MAAQ,EAC1BW,MAAOO,EAAKL,QAAQU,KAElBL,EAAKR,MAAMV,OAAS,IACtBkB,EAAKI,UAAS,OAKpBA,SAAW,SAACI,GACVC,QAAQC,IAAIhB,GAEZ,IAAIW,EAAWL,EAAKR,MAAMC,MAAMa,IAAI,SAAAJ,GAElC,OADAA,EAAKC,SAAU,EACRD,IAGTF,EAAKO,SAAS,CACZzB,MAAO,EACPW,MAAOY,IAELG,EACFG,MAAM,YAENA,MAAM,iGAGD,IAAAC,EAAAC,KACP,OACEpC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoC,SAAA,KACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAACoC,EAAD,CACEjC,MAAO+B,KAAKrB,MAAMV,QAEpBL,EAAAC,EAAAC,cAACqC,EAAD,MACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZiC,KAAKrB,MAAMC,MAAMa,IAAI,SAAAJ,GACpB,OACEzB,EAAAC,EAAAC,cAACsC,EAAD,CACEC,IAAKhB,EAAKf,GACVA,GAAIe,EAAKf,GACTF,IAAKiB,EAAKjB,IACVkB,QAASD,EAAKC,QACdb,aAAcsB,EAAKtB,2BAvEnB6B,IAAMC,kBCHxBC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b51d7537.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(props) {\n    return (\n        <div className=\"container\">\n            <nav className=\"navbar fixed-top navbar-light bg-light\">\n                <a className=\"navbar-brand\" href=\"#\">Experiment Round Up</a>\n                <span>Score: {props.score}</span>\n            </nav>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container text-center\">\n                <h1 className=\"display-4\">Ohana!</h1>\n                <p className=\"lead\">Oh no! Some of Jumba's 626 experiments got loose! Find all the experiments, but don't find the same one twice!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron","import React from 'react';\n\nfunction Card(props) {\n    return (\n            <img className=\"card-img\" src={process.env.PUBLIC_URL + props.src} id={props.id} onClick={(e)=>props.clickHandler(props.id, e)} />\n            )\n        }\n        \nexport default Card","import React from 'react';\nimport Header from \"./components/header\";\nimport Jumbotron from \"./components/jumbotron\";\nimport Card from \"./components/card\";\n// import Characters from \"chacters.json\"\nimport experiments from \"./experiments.json\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    score: 0,\n    cards: experiments\n\n  }\n\n\n  shuffle = (array) => {\n    array.sort(() => Math.random() - 0.5);\n    return array\n  }\n\n  clickHandler = (id) => {\n    // console.log(event);\n    // if card has already been clicked, gameOver\n    let cardClicked = this.state.cards.find(card => (card.id === id));\n    if (cardClicked.clicked)\n      this.gameOver()\n    // else change image state to clicked and shuffle and increase score\n    else {\n      let newArray = this.state.cards.map(card => {\n        if (card.id === id) {\n          card.clicked = true\n        }\n        return card\n      })\n      this.setState({\n        score: this.state.score + 1,\n        cards: this.shuffle(newArray)\n      })\n      if (this.state.score >= 16) {\n        this.gameOver(true);\n      }\n    }\n  }\n\n  gameOver = (gameResults) => {\n    console.log(experiments)\n    // make all clicked values false\n    let newArray = this.state.cards.map(card => {\n      card.clicked = false\n      return card\n    })\n    // set score to 0 and shuffle\n    this.setState({\n      score: 0,\n      cards: newArray\n    })\n    if (gameResults)\n      alert(\"You win!\")\n    else\n      alert(\"You lose! Try again!\")\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"container\">\n        <Header\n          score={this.state.score}\n        />\n        <Jumbotron />\n          <div className=\"grid\">\n            {this.state.cards.map(card => {\n              return (\n                <Card\n                  key={card.id}\n                  id={card.id}\n                  src={card.src}\n                  clicked={card.clicked}\n                  clickHandler={this.clickHandler}\n                />\n              )\n            })}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}